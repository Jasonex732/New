' You can create multiline Text Boxes by setting Multiline to True
' Scrollbars to Vertical and Wordwrap to True

Public Class Form1
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load

    End Sub

    ' Private means that this subroutine can't be called
    ' by any code outside of this class
    ' Sub means that this method doesn't return a value
    ' btnUpdate_Click is the name of the subroutine
    ' Values sent to this are between parentheses 
    ' Handles defines that this is called when the even triggers
    Private Sub btnUpdate_Click(sender As Object, e As EventArgs) Handles btnUpdate.Click

        ' If you don't assign a type a default will be chosen
        ' based on the value assigned
        Dim randomNumber = 12.2
        TextBox1.Text = TypeName(randomNumber)

        ' ---------- Math Functions ----------

        ' You join strings with other data with &
        ' Environment.NewLine adds the platform specific newline
        Dim txtOutput As String = "Abs(-19) = " & Math.Abs(-19) & Environment.NewLine

        ' &= is a shortcut you can use to join a string with
        ' the original string
        txtOutput &= "Ceiling(4.5) = " & Math.Ceiling(4.5) & Environment.NewLine

        txtOutput &= "Floor(4.5) = " & Math.Floor(4.5) & Environment.NewLine

        ' 2.718 e raised to the specified power
        txtOutput &= "Exp(1) = " & Math.Exp(1) & Environment.NewLine

        ' Return the natural log
        txtOutput &= "Log(2.718) = " & Math.Log(2.718) & Environment.NewLine

        ' Return base 10 log
        txtOutput &= "Log10(3000) = " & Math.Log10(3000) & Environment.NewLine

        ' Return the larger number
        txtOutput &= "Max(5,4) = " & Math.Max(5, 4) & Environment.NewLine

        ' Return the smaller number
        txtOutput &= "Min(5,4) = " & Math.Min(5, 4) & Environment.NewLine

        ' Return the number to the power of number
        txtOutput &= "Pow(5,2) = " & Math.Pow(5, 2) & Environment.NewLine

        ' Return the sqrt
        txtOutput &= "Sqrt(25) = " & Math.Sqrt(25) & Environment.NewLine

        ' Round a Decimal or Double
        txtOutput &= "Round(4.5) = " & Math.Round(4.5) & Environment.NewLine

        ' There is also Cos, Sin, Tan, Acos, Asin, Atan, Cosh, Sinh
        ' Tanh

        ' You can add, subtract, multiply and divide a number
        ' and save it back to itself
        Dim randInt = 10
        randInt += 10
        txtOutput &= "10 + 10 = " & randInt & Environment.NewLine

        ' If you save to an integer it stays an integer
        randInt *= 0.13
        txtOutput &= "20 * .13 = " & randInt & Environment.NewLine

        ' TextBox1.Text = txtOutput

        ' ---------- Strings ----------

        txtOutput = ""

        Dim randStr As String = "This is a string"

        ' Get the length of a String
        txtOutput &= "randStr Length = " & randStr.Length & Environment.NewLine

        ' Start at index 0 and return the next 3 letters
        txtOutput &= "1st 3 = " & randStr.Substring(0, 3) & Environment.NewLine

        ' Replace a string
        randStr = randStr.Replace("string", "sentence")
        txtOutput &= "Changed String = " & randStr & Environment.NewLine

        ' Formatting a Decimal
        Dim decRandNum As Decimal = 3123.14159

        ' Add thousands separator and only 3 decimals 
        txtOutput &= "Pi = " & String.Format("{0:n3}", decRandNum) & Environment.NewLine

        ' Add thosands separator and treat as currency
        txtOutput &= "Pi Currency = " & String.Format("{0:c}", decRandNum) & Environment.NewLine

        ' Display 5 numbers before the decimal and 1 after
        txtOutput &= "Pi Random = " & String.Format("{0:00000.0}", decRandNum) & Environment.NewLine

        ' g Displays without thousands separator
        ' f Displays with at least 1 number on the left and right
        ' of the decimal
        ' p Multiplies the number times 100 and shows %
        ' e Display in exponential notation

        ' Get the 1st location of a string
        ' Define 1st character to start with, string to search,
        ' string to search for 
        txtOutput &= "is in String = " & InStr(1, randStr, "i", CompareMethod.Text) & Environment.NewLine

        ' Create a fixed size array
        ' Arrays are used to store multiple values
        Dim arrayEmployees(0 To 2) As String
        arrayEmployees(0) = "Bob"
        arrayEmployees(1) = "Sally"
        arrayEmployees(2) = "Paul"

        ' Join array values in a string
        Dim strEmployees As String = Join(arrayEmployees, ", ")

        txtOutput &= "Employees = " & strEmployees & Environment.NewLine

        ' Split a string into an array
        arrayEmployees = Split(strEmployees, ", ")

        txtOutput &= "Employees = " & arrayEmployees.ToString & Environment.NewLine

        ' For loop for cycling through an array
        ' i increments each time through the loop until
        ' its value is arrayEmployees.Length - 1
        For i As Integer = 0 To arrayEmployees.Length - 1
            txtOutput &= "Employee = " & arrayEmployees(i) & Environment.NewLine
        Next

        ' Return the left 3 characters
        txtOutput &= "Left 3 = " & Strings.Left(randStr, 3) & Environment.NewLine

        ' Return the right 3 characters
        txtOutput &= "Right 3 = " & Strings.Right(randStr, 3) & Environment.NewLine

        ' Return uppercase
        txtOutput &= "Uppercase = " & UCase(randStr) & Environment.NewLine

        ' Return lowercase
        txtOutput &= "Lowercase = " & LCase(randStr) & Environment.NewLine

        ' Reverse string
        txtOutput &= "Reverse = " & StrReverse(randStr) & Environment.NewLine

        ' Compare 2 strings
        ' Returns -1 if 1 sorts ahead of 2
        ' Returns 0 if they are equal
        ' Returns 1 if 1 sorts after 2
        txtOutput &= "Dog Compare Cat = " & StrComp("Dog", "Cat", CompareMethod.Text) & Environment.NewLine

        ' Trim whitespace
        ' There is also LTrim and RTrim
        txtOutput &= "Trim = " & Trim("   string   ") & Environment.NewLine

        ' ---------- Dates ----------

        txtOutput = ""

        ' Create a date with the current time
        Dim dteCurrent As Date = Now

        ' Get the month
        txtOutput &= "Month = " & dteCurrent.Month & Environment.NewLine

        ' Get the day
        txtOutput &= "Day = " & dteCurrent.Day & Environment.NewLine

        ' Get the year
        txtOutput &= "Year = " & dteCurrent.Year & Environment.NewLine

        ' Get the hour
        txtOutput &= "Hour = " & dteCurrent.Hour & Environment.NewLine

        ' Get the minute
        txtOutput &= "Minute = " & dteCurrent.Minute & Environment.NewLine

        ' Get the second
        txtOutput &= "Second = " & dteCurrent.Second & Environment.NewLine

        ' Get the day name
        txtOutput &= "Day = " & dteCurrent.ToString("dddd") & Environment.NewLine

        ' Get the day name
        txtOutput &= "Month = " & dteCurrent.ToString("MMMM") & Environment.NewLine

        ' Set a date
        dteCurrent = #12/21/1974 11:32:00 AM#

        ' Get the whole time and date
        txtOutput &= "Date = " & dteCurrent.ToLongTimeString & dteCurrent.ToLongDateString & Environment.NewLine

        ' ---------- Methods ----------
        ' We use functions to promote code reuse and to break
        ' code into parts so it is easier to understand
        ShowMessage()

        ' Call a function
        txtOutput &= "6 + 5 = " & GetSum(6, 5) & Environment.NewLine

        ' Pass a variable to a function
        Dim intVal As Integer = 10

        ' The value and not the variable is passed to a function
        ' so what happens to it in the function is temporary
        ChangeVal(intVal)

        txtOutput &= "intVal out of Func 1 = " & intVal & Environment.NewLine

        ChangeVal2(intVal)

        txtOutput &= "intVal out of Func 2 = " & intVal & Environment.NewLine

        txtOutput &= "1 + 2 + 3 + 4 = " & GetSumMore(1, 2, 3, 4) & Environment.NewLine

        TextBox1.Text = txtOutput

    End Sub

    ' Create a subroutine that opens a MessageBox
    Private Sub ShowMessage()
        MessageBox.Show("Hello Again", "Love Saying Hello")
    End Sub

    ' Functions can return values
    Private Function GetSum(num1 As Integer, num2 As Integer)
        Return num1 + num2
    End Function

    Private Sub ChangeVal(intVal As Integer)
        intVal = 20
        MessageBox.Show("intVal in Func 1 = " & intVal, "Change Value")
    End Sub

    ' You can define that you want to be able to change the value
    ' outside of a function with ByRef
    Private Sub ChangeVal2(ByRef intVal As Integer)
        intVal = 30
        MessageBox.Show("intVal in Func 2 = " & intVal, "Change Value")
    End Sub

    ' You can accept a variable number of parameters
    Private Function GetSumMore(ByVal ParamArray Numbers() As Integer)
        Dim sum As Integer = 0

        For i As Integer = 0 To Numbers.Length
            sum += i
        Next

        Return sum

    End Function

End Class

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++---

l Basic Tutorial 3Visual Basic .NET
' Create a TextBox named TextBox1 and change Multiline to True
' ScrollBars to Vertical and WordWrap to True
' Create a Button named BtnUpdate
' Change Text size to 18 for both

Public Class Form1
    Private Sub BtnUpdate_Click(sender As Object, e As EventArgs) Handles BtnUpdate.Click

        ' ---------- CONDITIONALS ----------
        Dim txtOutput As String = ""

        ' The If Statement is used to perform different actions
        ' depending on different conditions

        Dim intAge As Integer = 7

        ' You can compare values with =, <>, >, <, >=, <=

        ' Single line If statement
        ' If you want multiple statements separate them with a :
        If intAge < 18 Then txtOutput &= "You can't vote" & Environment.NewLine : 
        txtOutput &= "You can vote in " & 18 - intAge & " years" & Environment.NewLine

        If intAge < 5 Then
            txtOutput &= "To young for school" & Environment.NewLine

        ElseIf intAge = 5 Then
            txtOutput &= "Go to Kindergarten" & Environment.NewLine

            ' With logical operators Or and And you can check for
            ' multiple conditions
        ElseIf intAge > 5 And intAge < 18 Then
            Dim intGrade = intAge - 5
            txtOutput &= "Go to grade " & intGrade & Environment.NewLine

        Else
            txtOutput &= "Go to college" & Environment.NewLine

        End If

        ' You can compare strings and ignore case
        Dim strName As String = "Derek"

        ' Compare returns 0 if they match 
        If String.Compare("DEREK", strName, True) = 0 Then
            txtOutput &= "These Strings are Equal" & Environment.NewLine
        End If

        ' Select Case comparison operator
        Select Case intAge
            ' You can type single digits or multiple
            Case 1, 2, 3, 4
                txtOutput &= "To young for school" & Environment.NewLine
            Case 5
                txtOutput &= "Go to Kindergarten" & Environment.NewLine

            ' You can define a range
            Case 6 To 18
                Dim intGrade = intAge - 5
                txtOutput &= "Go to grade " & intGrade & Environment.NewLine

            Case Else
                ' This is the default action
                txtOutput &= "Go to college" & Environment.NewLine
        End Select

        ' The Ternary operator returns the 1st value if True
        ' and the 2nd if False
        Dim boolCanVote As Boolean = If(intAge >= 18, True, False)

        txtOutput &= "Can you vote : " & boolCanVote & Environment.NewLine

        ' ---------- LOOPING ----------
        txtOutput = ""

        ' For loops execute the code within them a set number of times
        For intNum = 1 To 10
            txtOutput &= intNum & Environment.NewLine
        Next

        ' The Step operator defines the increment amount
        ' You can also use a negative Step
        For intNum = 0 To 50 Step 10
            txtOutput &= intNum & Environment.NewLine

            ' Exit For allows you to exit early
            If intNum = 40 Then Exit For
        Next

        ' For Each can cycle through each item in an array
        ' Create and fill an array with Strings
        Dim employees = New String() {"Paul", "Sally", "Jack"}

        For Each employee As String In employees
            txtOutput &= employee & Environment.NewLine
        Next

        Dim numberGuessed = 0

        ' Generate Random Value
        Dim upperbound = 10
        Dim lowerbound = 1

        Dim randomValue = CInt(Math.Floor((upperbound - lowerbound + 1) * Rnd())) + lowerbound

        ' Do Until loops are used when you must have the code 
        ' execute at least once
        ' The Do While loop continues looping as long as a condition
        ' is True
        Do Until numberGuessed = randomValue

            txtOutput &= "Computer Guessed " & numberGuessed & Environment.NewLine

            numberGuessed += 1

            ' You can exit a Do loop early
            If numberGuessed = 10 Then Exit Do

        Loop

        txtOutput &= "The Computer Guessed it" & Environment.NewLine

        ' ---------- ARRAYS ----------
        txtOutput = ""

        ' Define a fixed size array that can contain 3 elements
        Dim customers() As String = {"Bob", "Sally", "Manny"}

        ' Assign a value to the 3rd element 
        customers(2) = "Paul"

        ' Get the value in an array
        txtOutput &= "#1 Customer " & customers(0) & Environment.NewLine

        ' Sort an array
        Array.Sort(customers)

        ' Reverse the array order
        Array.Reverse(customers)

        ' Change the size of the array and preserve values
        ' Without Preserve the original values would be deleted
        ReDim Preserve customers(5)

        ' Cycle through values in array
        For Each customer As String In customers
            txtOutput &= customer & Environment.NewLine
        Next

        'Declare a multi-dimensional array and set values
        Dim matrix(4, 4) As String

        For i = 0 To 3
            For j = 1 To 3
                matrix(i, j) = i & j
            Next
        Next

        For i = 0 To 3
            For j = 1 To 3
                txtOutput &= matrix(i, j) & " "
            Next
            txtOutput &= Environment.NewLine
        Next


        TextBox1.Text = txtOutput
    End Sub

End Class

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' Create a TextBox named TextBox1 and change Multiline to True
' ScrollBars to Vertical and WordWrap to True
' Create a Button named BtnUpdate
' Change Text size to 18 for both
 
Public Class Form1
    Private Sub BtnUpdate_Click(sender As Object, e As EventArgs) Handles BtnUpdate.Click
 
        ' ---------- CONDITIONALS ----------
        Dim txtOutput As String = ""
 
        ' The If Statement is used to perform different actions
        ' depending on different conditions
 
        Dim intAge As Integer = 7
 
        ' You can compare values with =, <>, >, <, >=, <=
 
        ' Single line If statement
        ' If you want multiple statements separate them with a :
        If intAge < 18 Then txtOutput &= "You can't vote" & Environment.NewLine : 
        txtOutput &= "You can vote in " & 18 - intAge & " years" & Environment.NewLine
 
        If intAge < 5 Then
            txtOutput &= "To young for school" & Environment.NewLine
 
        ElseIf intAge = 5 Then
            txtOutput &= "Go to Kindergarten" & Environment.NewLine
 
            ' With logical operators Or and And you can check for
            ' multiple conditions
        ElseIf intAge > 5 And intAge < 18 Then
            Dim intGrade = intAge - 5
            txtOutput &= "Go to grade " & intGrade & Environment.NewLine
 
        Else
            txtOutput &= "Go to college" & Environment.NewLine
 
        End If
 
        ' You can compare strings and ignore case
        Dim strName As String = "Derek"
 
        ' Compare returns 0 if they match 
        If String.Compare("DEREK", strName, True) = 0 Then
            txtOutput &= "These Strings are Equal" & Environment.NewLine
        End If
 
        ' Select Case comparison operator
        Select Case intAge
            ' You can type single digits or multiple
            Case 1, 2, 3, 4
                txtOutput &= "To young for school" & Environment.NewLine
            Case 5
                txtOutput &= "Go to Kindergarten" & Environment.NewLine
 
            ' You can define a range
            Case 6 To 18
                Dim intGrade = intAge - 5
                txtOutput &= "Go to grade " & intGrade & Environment.NewLine
 
            Case Else
                ' This is the default action
                txtOutput &= "Go to college" & Environment.NewLine
        End Select
 
        ' The Ternary operator returns the 1st value if True
        ' and the 2nd if False
        Dim boolCanVote As Boolean = If(intAge >= 18, True, False)
 
        txtOutput &= "Can you vote : " & boolCanVote & Environment.NewLine
 
        ' ---------- LOOPING ----------
        txtOutput = ""
 
        ' For loops execute the code within them a set number of times
        For intNum = 1 To 10
            txtOutput &= intNum & Environment.NewLine
        Next
 
        ' The Step operator defines the increment amount
        ' You can also use a negative Step
        For intNum = 0 To 50 Step 10
            txtOutput &= intNum & Environment.NewLine
 
            ' Exit For allows you to exit early
            If intNum = 40 Then Exit For
        Next
 
        ' For Each can cycle through each item in an array
        ' Create and fill an array with Strings
        Dim employees = New String() {"Paul", "Sally", "Jack"}
 
        For Each employee As String In employees
            txtOutput &= employee & Environment.NewLine
        Next
 
        Dim numberGuessed = 0
 
        ' Generate Random Value
        Dim upperbound = 10
        Dim lowerbound = 1
 
        Dim randomValue = CInt(Math.Floor((upperbound - lowerbound + 1) * Rnd())) + lowerbound
 
        ' Do Until loops are used when you must have the code 
        ' execute at least once
        ' The Do While loop continues looping as long as a condition
        ' is True
        Do Until numberGuessed = randomValue
 
            txtOutput &= "Computer Guessed " & numberGuessed & Environment.NewLine
 
            numberGuessed += 1
 
            ' You can exit a Do loop early
            If numberGuessed = 10 Then Exit Do
 
        Loop
 
        txtOutput &= "The Computer Guessed it" & Environment.NewLine
 
        ' ---------- ARRAYS ----------
        txtOutput = ""
 
        ' Define a fixed size array that can contain 3 elements
        Dim customers() As String = {"Bob", "Sally", "Manny"}
 
        ' Assign a value to the 3rd element 
        customers(2) = "Paul"
 
        ' Get the value in an array
        txtOutput &= "#1 Customer " & customers(0) & Environment.NewLine
 
        ' Sort an array
        Array.Sort(customers)
 
        ' Reverse the array order
        Array.Reverse(customers)
 
        ' Change the size of the array and preserve values
        ' Without Preserve the original values would be deleted
        ReDim Preserve customers(5)
 
        ' Cycle through values in array
        For Each customer As String In customers
            txtOutput &= customer & Environment.NewLine
        Next
 
        'Declare a multi-dimensional array and set values
        Dim matrix(4, 4) As String
 
        For i = 0 To 3
            For j = 1 To 3
                matrix(i, j) = i & j
            Next
        Next
 
        For i = 0 To 3
            For j = 1 To 3
                txtOutput &= matrix(i, j) & " "
            Next
            txtOutput &= Environment.NewLine
        Next
 
 
        TextBox1.Text = txtOutput
    End Sub
 
End Class

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

---------- form1.vb ----------
 
Public Class Form1
 
    ' Declare a Constant thats value can't change
    Private Const PI As Decimal = 3.141592653
 
    ' ----- ENUMERATIONS -----
    ' With Enumerations you can create custom types like
    ' how Booleans can only except the values True or False
    ' Create an Enum that tracks seasons
    Private Enum Season As Integer
        Spring = 0
        Summer = 1
        Fall = 2
        Winter = 3
    End Enum
 
    ' ----- STRUCTURES -----
    ' Used to store multiple pieces of data with different data types
    ' Public means you can refer to variables outside of the structure
    Public Structure Employee
        Public name As String
        Public position As String
        Public salary As Decimal
 
        ' You can add a property with all the info
        ' ReadOnly won't allow the property to be changed
        Public ReadOnly Property FullInfo() As String
            Get
                Return name & " is a " & position & " and makes $" & salary
            End Get
        End Property
    End Structure
 
    ' ----- OBJECT ORIENTED PROGRAMMING -----
    ' With OOP we model real world objects be defining their
    ' properties (Attributes) and methods (Capabilities)
    ' We define the properties and methods in a class which
    ' is a blueprint for creating objects
 
    ' Create a class by right clicking your project and then
    ' click Add -> Class and name it Animal.vb
 
    Private Sub BtnUpdate_Click(sender As Object, e As EventArgs) Handles BtnUpdate.Click
 
        Dim txtOutput As String = ""
 
        ' ----- ARRAYLISTS -----
        ' ArrayLists allow you to create resizable arrays
 
        Dim customers As New ArrayList
 
        ' Add items
        customers.Add("Bob Smith")
        customers.Add("Sally Roberts")
 
        ' Number of items in the list
        txtOutput &= "Count : " & customers.Count &
            Environment.NewLine
 
        ' Number of items the array list can contain
        txtOutput &= "Capacity : " & customers.Capacity &
            Environment.NewLine
 
        ' Insert an element into defined index
        customers.Insert(0, "Paul Marx")
 
        ' Remove matching object
        customers.Remove("Sally Roberts")
 
        ' Sort the list
        customers.Sort()
 
        ' Reverse the list
        customers.Reverse()
 
        ' Returns True or False if array list contains value
        txtOutput &= "Contains Bob Smith : " &
            customers.Contains("Bob Smith") &
            Environment.NewLine
 
        txtOutput &= "Index of Bob Smith : " &
            customers.IndexOf("Bob Smith") &
            Environment.NewLine
 
        ' Copy to an array
        Dim arrCustomers(2) As String
        customers.CopyTo(arrCustomers)
 
        For Each customer As String In arrCustomers
            txtOutput &= customer &
            Environment.NewLine
        Next
 
        ' Clear the list
        customers.Clear()
 
        ' ----- ENUMERATION -----
        ' Define a variable as Season type
        Dim currentSeason As Season = Season.Spring
 
        ' Output the set value
        txtOutput &= "It is " & currentSeason.ToString &
            Environment.NewLine
 
        ' ----- STRUCTURES -----
 
        Dim bobSmith As Employee
        bobSmith.name = "Bob Smith"
        bobSmith.position = "Manager"
        bobSmith.salary = 50000
 
        txtOutput &= bobSmith.name & " is a " &
            bobSmith.position & " and makes $" &
            bobSmith.salary & Environment.NewLine
 
        txtOutput &= bobSmith.FullInfo & Environment.NewLine
 
        ' ----- OBJECT ORIENTED PROGRAMMING -----
        ' Create a Animal object and assign property values
        Dim dog As New Animal With {
            .Weight = 77.5,
            .Height = 25.5,
            .Speed = 30.0
        }
 
        dog.SetName("10")
 
        txtOutput &= "The Dog is Named " & dog.GetName &
            Environment.NewLine
 
        txtOutput &= dog.Run() &
            Environment.NewLine
 
        ' Using a constructor
        Dim cat As New Animal(9, 9, 30, "Fluffy")
 
        txtOutput &= cat.Run() &
            Environment.NewLine
 
        ' With Inheritance subclasses inherit all the properties and
        ' methods of the super class
        Dim kitty As New Cat With {
            .Weight = 9.5,
            .Height = 9.5,
            .Speed = 30.0
        }
 
        kitty.SetName("Kitty")
 
        txtOutput &= kitty.Run() &
            Environment.NewLine
 
        ' Polymorphism is when you can refer to a subclass as if 
        ' it was of the super class type and still execute 
        ' overridden methods
 
        txtOutput &= ShowInfo(cat) &
            Environment.NewLine
        txtOutput &= ShowInfo(kitty) &
            Environment.NewLine
 
        TextBox1.Text = txtOutput
 
    End Sub
 
    Function ShowInfo(theAnimal As Animal) As String
        Return theAnimal.GetName & " weighs " &
            theAnimal.Weight & " lbs " &
            " and is " & theAnimal.Height &
            " inches tall " & theAnimal.Run()
    End Function
 
End Class
 
---------- Animal.vb ----------
 
Public Class Animal
    ' Define the properties for your object
    Public Height As Decimal = 0.0
    Public Weight As Decimal = 0.0
    Public Speed As Decimal = 0.0
 
    ' Add a Private property to protect the data
    Private Name As String
 
    ' Returns the name, but could return a special value
    Public ReadOnly Property GetName() As String
        Get
            Return Name
        End Get
    End Property
 
    ' Protects the name from getting bad data
    Public Sub SetName(value As String)
        If IsNumeric(value) Then
            MessageBox.Show("Name Can't Contain Numbers",
                            "ERROR")
        Else
            Name = value
        End If
    End Sub
 
    ' The Constructor is called when the user creates an object
    ' We define that attributes are optional and provide defaults
    Public Sub New(Optional ht As Decimal = 0.0,
                   Optional wt As Decimal = 0.0,
                   Optional spd As Decimal = 0.0,
                   Optional nam As String = "Unknown")
        Height = ht
        Weight = wt
        Speed = spd
        SetName(nam)
 
    End Sub
 
    ' Create a function that simulates running
    ' Mark it as overridable so subclasses can override it
    Public Overridable Function Run() As String
        ' You don't have to use GetName in the class
        Return Name & " Runs " & Speed & " MPH"
    End Function
 
 
End Class
 
---------- Cat.vb ----------
 
Public Class Cat
    ' With this line we inherit all properties and methods
    ' from the Animal super class
    Inherits Animal
 
    ' Create a function for cleaning
    Public Function Clean() As String
        Return GetName & " Cleans Itself"
    End Function
 
    ' To override a Function just create one with the same name
    ' and add Overrides
    Public Overrides Function Run() As String
 
        ' Generate Random 1 or 2
        Dim randomValue = CInt(Math.Floor((2) * Rnd())) + 1
 
        ' Cats don't always want to run
        If randomValue = 1 Then
            Return GetName & " Runs " & Speed & " MPH"
        Else
            Return GetName & " Prefers to Sleep"
        End If
 
    End Function
 
End Class

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

al Basic Tutorial 5Visual Basic .NET
' ----- Form1.vb -----

Imports System
Imports System.IO
Imports System.Data.SqlClient

Public Class Form1
    Private Sub BtnUpdate_Click(sender As Object, e As EventArgs) Handles BtnUpdate.Click

        Dim txtOutput As String = ""

        ' Create an object
        Dim spot As New Animal With {
            .Name = "Spot"
        }

        ' And another using the Shared method
        Dim fluffy = Animal.MakeAnimal("Fluffy")

        ' Access the shared property
        txtOutput &= "Num of Animals " &
            fluffy.NumOfAnimals &
            Environment.NewLine

        ' Create a string array with lines of text
        Dim lines() As String = {"This is some random text",
            "saved to a file."}

        ' Target the My Documents path
        Dim mydocpath As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)

        ' Write the strings to the file
        ' Using acquires the system resource StreamWriter
        Using outputFile As New StreamWriter(mydocpath & Convert.ToString("\randomtext.txt"))
            For Each line As String In lines
                outputFile.WriteLine(line)
            Next
        End Using

        ' Append text to the file
        Using outputFile As New StreamWriter(mydocpath & Convert.ToString("\randomtext.txt"), True)
            outputFile.WriteLine("Here is more info")
        End Using

        ' Read text from a file and output it
        Try
            ' Open the file using StreamReader
            Using sr As New StreamReader(mydocpath & Convert.ToString("\randomtext.txt"))
                Dim line As String
                ' Read the stream and save it to a string
                ' which is written in the text box
                line = sr.ReadToEnd()
                txtOutput &= line &
                    Environment.NewLine
            End Using
        Catch ex As Exception
            Console.WriteLine("Couldn't Read the File")
            Console.WriteLine(ex.Message)
        End Try

        ' MessageBoxs provide an easy way to pass information
        ' to the user and then pass info back to you
        ' There are multiple icons you can use Asterisk,
        ' Error, Exclamation, Hand, Information, Question,
        ' Stop, Warning, None
        ' There are multiple buttons AbortRetryIgnore,
        ' OK, OKCancel, RetryCancel, YesNo, YesNoCancel
        ' You can set the default highlighted button with
        ' Button1, Button2, or Button3

        If MessageBox.Show("Message to Show", "Title",
                        MessageBoxButtons.AbortRetryIgnore,
                        MessageBoxIcon.Exclamation,
                        MessageBoxDefaultButton.Button1) = System.Windows.Forms.DialogResult.Abort Then
            txtOutput &= "Abort Clicked" & Environment.NewLine
        Else
            txtOutput &= "Retry or Ignore Clicked" & Environment.NewLine

        End If

        ' Use OpenFileDialog to open files
        Dim OpenFileDialogEx As New OpenFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Open Important File"
        }

        ' Get the file selected
        Dim fileSelected As String

        If OpenFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = OpenFileDialogEx.FileName

                txtOutput &= "File Selected : " &
                    fileSelected &
                    Environment.NewLine

            Catch ex As Exception
                MessageBox.Show("Error Getting File", "Error")
            End Try
        End If

        ' SaveFileDialog allows you to define what file to save
        Dim fileToSave As String = ""

        ' OverwritePrompt protects you if the file already exists
        Dim SaveFileDialogEx As New SaveFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Save Important File",
            .DefaultExt = "txt",
            .FileName = fileToSave,
            .OverwritePrompt = True
        }

        If SaveFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = SaveFileDialogEx.FileName

                txtOutput &= "File Saved : " &
                    fileSelected &
                    Environment.NewLine

            Catch ex As Exception
                MessageBox.Show("Error Saving File", "Error")
            End Try

        End If

        ' FontDialog allows the user to select the font,
        ' font style, size, color, strikeout and underline
        Dim FontDialogEx As New FontDialog() With {
            .ShowColor = True
        }

        If FontDialogEx.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
            txtOutput &= FontDialogEx.Font.ToString &
                Environment.NewLine

            txtOutput &= FontDialogEx.Color.ToString &
                Environment.NewLine
        End If

        TextBox1.Text = txtOutput
    End Sub
End Class

' ----- Animal.vb -----

Public Class Animal

    Public Name As String

    ' Some times we want to define properties that have
    ' the same value for every object. These are
    ' called Shared Properties
    Public Shared NumOfAnimals As Integer = 0

    Public Sub New(Optional n As String = "Unknown")
        Name = n

        ' Every time an object is created we'll keep
        ' track of it
        NumOfAnimals += 1
    End Sub

    ' You can only access other shared functions and 
    ' shared properties with shared methods / functions
    ' This 
    Public Shared Function MakeAnimal(n As String)
        Dim newAnimal As New Animal() With {
            .Name = n
        }

        Return newAnimal
    End Function

End Class
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
' ----- Form1.vb -----
 
Imports System
Imports System.IO
Imports System.Data.SqlClient
 
Public Class Form1
    Private Sub BtnUpdate_Click(sender As Object, e As EventArgs) Handles BtnUpdate.Click
 
        Dim txtOutput As String = ""
 
        ' Create an object
        Dim spot As New Animal With {
            .Name = "Spot"
        }
 
        ' And another using the Shared method
        Dim fluffy = Animal.MakeAnimal("Fluffy")
 
        ' Access the shared property
        txtOutput &= "Num of Animals " &
            fluffy.NumOfAnimals &
            Environment.NewLine
 
        ' Create a string array with lines of text
        Dim lines() As String = {"This is some random text",
            "saved to a file."}
 
        ' Target the My Documents path
        Dim mydocpath As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
 
        ' Write the strings to the file
        ' Using acquires the system resource StreamWriter
        Using outputFile As New StreamWriter(mydocpath & Convert.ToString("\randomtext.txt"))
            For Each line As String In lines
                outputFile.WriteLine(line)
            Next
        End Using
 
        ' Append text to the file
        Using outputFile As New StreamWriter(mydocpath & Convert.ToString("\randomtext.txt"), True)
            outputFile.WriteLine("Here is more info")
        End Using
 
        ' Read text from a file and output it
        Try
            ' Open the file using StreamReader
            Using sr As New StreamReader(mydocpath & Convert.ToString("\randomtext.txt"))
                Dim line As String
                ' Read the stream and save it to a string
                ' which is written in the text box
                line = sr.ReadToEnd()
                txtOutput &= line &
                    Environment.NewLine
            End Using
        Catch ex As Exception
            Console.WriteLine("Couldn't Read the File")
            Console.WriteLine(ex.Message)
        End Try
 
        ' MessageBoxs provide an easy way to pass information
        ' to the user and then pass info back to you
        ' There are multiple icons you can use Asterisk,
        ' Error, Exclamation, Hand, Information, Question,
        ' Stop, Warning, None
        ' There are multiple buttons AbortRetryIgnore,
        ' OK, OKCancel, RetryCancel, YesNo, YesNoCancel
        ' You can set the default highlighted button with
        ' Button1, Button2, or Button3
 
        If MessageBox.Show("Message to Show", "Title",
                        MessageBoxButtons.AbortRetryIgnore,
                        MessageBoxIcon.Exclamation,
                        MessageBoxDefaultButton.Button1) = System.Windows.Forms.DialogResult.Abort Then
            txtOutput &= "Abort Clicked" & Environment.NewLine
        Else
            txtOutput &= "Retry or Ignore Clicked" & Environment.NewLine
 
        End If
 
        ' Use OpenFileDialog to open files
        Dim OpenFileDialogEx As New OpenFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Open Important File"
        }
 
        ' Get the file selected
        Dim fileSelected As String
 
        If OpenFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = OpenFileDialogEx.FileName
 
                txtOutput &= "File Selected : " &
                    fileSelected &
                    Environment.NewLine
 
            Catch ex As Exception
                MessageBox.Show("Error Getting File", "Error")
            End Try
        End If
 
        ' SaveFileDialog allows you to define what file to save
        Dim fileToSave As String = ""
 
        ' OverwritePrompt protects you if the file already exists
        Dim SaveFileDialogEx As New SaveFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Save Important File",
            .DefaultExt = "txt",
            .FileName = fileToSave,
            .OverwritePrompt = True
        }
 
        If SaveFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = SaveFileDialogEx.FileName
 
                txtOutput &= "File Saved : " &
                    fileSelected &
                    Environment.NewLine
 
            Catch ex As Exception
                MessageBox.Show("Error Saving File", "Error")
            End Try
 
        End If
 
        ' FontDialog allows the user to select the font,
        ' font style, size, color, strikeout and underline
        Dim FontDialogEx As New FontDialog() With {
            .ShowColor = True
        }
 
        If FontDialogEx.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
            txtOutput &= FontDialogEx.Font.ToString &
                Environment.NewLine
 
            txtOutput &= FontDialogEx.Color.ToString &
                Environment.NewLine
        End If
 
        TextBox1.Text = txtOutput
    End Sub
End Class
 
' ----- Animal.vb -----
 
Public Class Animal
 
    Public Name As String
 
    ' Some times we want to define properties that have
    ' the same value for every object. These are
    ' called Shared Properties
    Public Shared NumOfAnimals As Integer = 0
 
    Public Sub New(Optional n As String = "Unknown")
        Name = n
 
        ' Every time an object is created we'll keep
        ' track of it
        NumOfAnimals += 1
    End Sub
 
    ' You can only access other shared functions and 
    ' shared properties with shared methods / functions
    ' This 
    Public Shared Function MakeAnimal(n As String)
        Dim newAnimal As New Animal() With {
            .Name = n
        }
 
        Return newAnimal
    End Function
 
End Class

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

al Basic Tutorial 6Visual Basic .NET
I. Menustrip

	1. Drag the menustrip up
	
	2. Right click the menu and Insert Standard Items
	
	3. Click Items in the Property Panel to change the items

		A. Click add and put &View in text, move to to the 3rd item,
		and change the name to ViewToolStripMenuItem
		
		B. Click DropDownItems
		
			a. Change Text to Hide Toolbar and Name to HideToolbarToolStripMenuItem
			
			b. Change ShortcutKeys to Ctrl + Alt + X
			
	4. Click View and Add Font to the dropdown and name it 
	FontToolStripMenuItem
	
	5. Click to the right of Font and add Arial, Times, and Courier
	
		A. Set Checked and CheckOnClick to True for Arial and set the other 
		2 to True for only CheckOnClick
		
		B. Name them ArialFontToolStripMenuItem, TimesFontToolStripMenuItem,
		and CourierFontToolStripMenuItem
		
		C. Double click ArialFontToolStripMenuItem and in the code
		If ArialFontToolStripMenuItem.Checked = True Then
            TimesFontToolStripMenuItem.Checked = False
            CourierFontToolStripMenuItem.Checked = False
        End If
        
II. ToolStrip

	1. Get the Visual Studio Image Library if you want standard icons
	
		A. https://www.microsoft.com/en-us/download/details.aspx?id=35825
		
		B. I got VS2013 Image Library.zip
		
		C. Make sure you extract the file

	2. Drag the ToolStrip onto your form
	
		A. Change the name to TspMain
	
		B. Right click the ToolStrip and click Insert Standard Items
	
	5. Add another ToolStrip, call it TspFormat and mark Visible as False
	
		A. Click Items
	
			a. Click Add
	
			b. Click Image -> Select FontColor
	
			c. Name it FontColorToolStripButton
	
	6. Add another with the image FontSize and the name FontSizeToolStripButton
	
	7. Add a separator to the top ToolStrip
	
	8. Add an icon with image FontDialogControl and name it OpenFormatToolStripButton
	
		A. Double click this icon and add this code
		If TspFormat.Visible = True Then
            TspFormat.Visible = False
        Else
            TspFormat.Visible = True
        End If
        
    9. Drag a TextBox on the form and set Multiline and Scrollbars to True and vertical
    
    10. Double click the new icon
    
----- Form1.vb -----

Public Class Form1
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load

    End Sub

    Private Sub ArialFontToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ArialFontToolStripMenuItem.Click

        If ArialFontToolStripMenuItem.Checked = True Then
            TimesFontToolStripMenuItem.Checked = False
            CourierFontToolStripMenuItem.Checked = False
        End If

    End Sub

    Private Sub TimesFontToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TimesFontToolStripMenuItem.Click

        If TimesFontToolStripMenuItem.Checked = True Then
            ArialFontToolStripMenuItem.Checked = False
            CourierFontToolStripMenuItem.Checked = False
        End If

    End Sub

    Private Sub CourierFontToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CourierFontToolStripMenuItem.Click

        If CourierFontToolStripMenuItem.Checked = True Then
            ArialFontToolStripMenuItem.Checked = False
            TimesFontToolStripMenuItem.Checked = False
        End If

    End Sub

    Private Sub OpenFormatToolStripButton_Click(sender As Object, e As EventArgs) Handles OpenFormatToolStripButton.Click

        If TspFormat.Visible = True Then
            TspFormat.Visible = False
        Else
            TspFormat.Visible = True
        End If

    End Sub

    Private Sub NewToolStripButton_Click(sender As Object, e As EventArgs) Handles NewToolStripButton.Click

        ' Clears the TextBox
        TextBox1.Text = String.Empty

        ' Put focus on the TextBox
        TextBox1.Focus()

    End Sub

    Private Sub OpenToolStripButton_Click(sender As Object, e As EventArgs) Handles OpenToolStripButton.Click

        Dim OpenFileDialogEx As New OpenFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Open Important File"
        }

        Dim fileSelected As String

        If OpenFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = OpenFileDialogEx.FileName

            Catch ex As Exception
                MessageBox.Show("Error Getting File", "Error")
            End Try
        End If

    End Sub

    Private Sub SaveToolStripButton_Click(sender As Object, e As EventArgs) Handles SaveToolStripButton.Click

        Dim fileToSave As String = ""

        ' OverwritePrompt protects you if the file already exists
        Dim SaveFileDialogEx As New SaveFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Save Important File",
            .DefaultExt = "txt",
            .FileName = fileToSave,
            .OverwritePrompt = True
        }

        Dim fileSelected As String

        If SaveFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = SaveFileDialogEx.FileName

            Catch ex As Exception
                MessageBox.Show("Error Saving File", "Error")
            End Try

        End If

    End Sub

    ' For Undo menu clicked
    Private Sub UndoToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles UndoToolStripMenuItem.Click

        ' Undo the last change
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Undo()
        End If

    End Sub

    ' For Cut menu clicked
    Private Sub CutToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CutToolStripMenuItem.Click

        ' Cut selected text and save to the clipboard
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Cut()
        End If

    End Sub

    ' For Cut Toolbar click
    Private Sub CutToolStripButton_Click(sender As Object, e As EventArgs) Handles CutToolStripButton.Click

        ' Have the other Cut subroutine handle
        CutToolStripMenuItem_Click(sender, e)

    End Sub

    ' For Copy menu click
    Private Sub CopyToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyToolStripMenuItem.Click

        ' Copy selected text and save to the clipboard
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Copy()
        End If

    End Sub

    ' For Copy Toolbar click
    Private Sub CopyToolStripButton_Click(sender As Object, e As EventArgs) Handles CopyToolStripButton.Click

        ' Let other Copy sub handle
        CopyToolStripMenuItem_Click(sender, e)

    End Sub

    ' For Paste menu click
    Private Sub PasteToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles PasteToolStripMenuItem.Click

        ' Paste text from the clipboard
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Paste()
        End If

    End Sub

    ' For Paste Toolbar click
    Private Sub PasteToolStripButton_Click(sender As Object, e As EventArgs) Handles PasteToolStripButton.Click

        PasteToolStripMenuItem_Click(sender, e)

    End Sub

    ' For Select All menu click
    Private Sub SelectAllToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SelectAllToolStripMenuItem.Click

        ' Select all text in the TextBox
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).SelectAll()
        End If

    End Sub
End Class
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
I. Menustrip
 
	1. Drag the menustrip up
	
	2. Right click the menu and Insert Standard Items
	
	3. Click Items in the Property Panel to change the items
 
		A. Click add and put &View in text, move to to the 3rd item,
		and change the name to ViewToolStripMenuItem
		
		B. Click DropDownItems
		
			a. Change Text to Hide Toolbar and Name to HideToolbarToolStripMenuItem
			
			b. Change ShortcutKeys to Ctrl + Alt + X
			
	4. Click View and Add Font to the dropdown and name it 
	FontToolStripMenuItem
	
	5. Click to the right of Font and add Arial, Times, and Courier
	
		A. Set Checked and CheckOnClick to True for Arial and set the other 
		2 to True for only CheckOnClick
		
		B. Name them ArialFontToolStripMenuItem, TimesFontToolStripMenuItem,
		and CourierFontToolStripMenuItem
		
		C. Double click ArialFontToolStripMenuItem and in the code
		If ArialFontToolStripMenuItem.Checked = True Then
            TimesFontToolStripMenuItem.Checked = False
            CourierFontToolStripMenuItem.Checked = False
        End If
        
II. ToolStrip
 
	1. Get the Visual Studio Image Library if you want standard icons
	
		A. https://www.microsoft.com/en-us/download/details.aspx?id=35825
		
		B. I got VS2013 Image Library.zip
		
		C. Make sure you extract the file
 
	2. Drag the ToolStrip onto your form
	
		A. Change the name to TspMain
	
		B. Right click the ToolStrip and click Insert Standard Items
	
	5. Add another ToolStrip, call it TspFormat and mark Visible as False
	
		A. Click Items
	
			a. Click Add
	
			b. Click Image -> Select FontColor
	
			c. Name it FontColorToolStripButton
	
	6. Add another with the image FontSize and the name FontSizeToolStripButton
	
	7. Add a separator to the top ToolStrip
	
	8. Add an icon with image FontDialogControl and name it OpenFormatToolStripButton
	
		A. Double click this icon and add this code
		If TspFormat.Visible = True Then
            TspFormat.Visible = False
        Else
            TspFormat.Visible = True
        End If
        
    9. Drag a TextBox on the form and set Multiline and Scrollbars to True and vertical
    
    10. Double click the new icon
    
----- Form1.vb -----
 
Public Class Form1
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
 
    End Sub
 
    Private Sub ArialFontToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ArialFontToolStripMenuItem.Click
 
        If ArialFontToolStripMenuItem.Checked = True Then
            TimesFontToolStripMenuItem.Checked = False
            CourierFontToolStripMenuItem.Checked = False
        End If
 
    End Sub
 
    Private Sub TimesFontToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TimesFontToolStripMenuItem.Click
 
        If TimesFontToolStripMenuItem.Checked = True Then
            ArialFontToolStripMenuItem.Checked = False
            CourierFontToolStripMenuItem.Checked = False
        End If
 
    End Sub
 
    Private Sub CourierFontToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CourierFontToolStripMenuItem.Click
 
        If CourierFontToolStripMenuItem.Checked = True Then
            ArialFontToolStripMenuItem.Checked = False
            TimesFontToolStripMenuItem.Checked = False
        End If
 
    End Sub
 
    Private Sub OpenFormatToolStripButton_Click(sender As Object, e As EventArgs) Handles OpenFormatToolStripButton.Click
 
        If TspFormat.Visible = True Then
            TspFormat.Visible = False
        Else
            TspFormat.Visible = True
        End If
 
    End Sub
 
    Private Sub NewToolStripButton_Click(sender As Object, e As EventArgs) Handles NewToolStripButton.Click
 
        ' Clears the TextBox
        TextBox1.Text = String.Empty
 
        ' Put focus on the TextBox
        TextBox1.Focus()
 
    End Sub
 
    Private Sub OpenToolStripButton_Click(sender As Object, e As EventArgs) Handles OpenToolStripButton.Click
 
        Dim OpenFileDialogEx As New OpenFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Open Important File"
        }
 
        Dim fileSelected As String
 
        If OpenFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = OpenFileDialogEx.FileName
 
            Catch ex As Exception
                MessageBox.Show("Error Getting File", "Error")
            End Try
        End If
 
    End Sub
 
    Private Sub SaveToolStripButton_Click(sender As Object, e As EventArgs) Handles SaveToolStripButton.Click
 
        Dim fileToSave As String = ""
 
        ' OverwritePrompt protects you if the file already exists
        Dim SaveFileDialogEx As New SaveFileDialog() With {
            .Filter = "Text Documents (*.txt)|*.txt|All Files (*.*)|*.*",
            .FilterIndex = 2,
            .Title = "Save Important File",
            .DefaultExt = "txt",
            .FileName = fileToSave,
            .OverwritePrompt = True
        }
 
        Dim fileSelected As String
 
        If SaveFileDialogEx.ShowDialog =
                System.Windows.Forms.DialogResult.OK Then
            Try
                fileSelected = SaveFileDialogEx.FileName
 
            Catch ex As Exception
                MessageBox.Show("Error Saving File", "Error")
            End Try
 
        End If
 
    End Sub
 
    ' For Undo menu clicked
    Private Sub UndoToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles UndoToolStripMenuItem.Click
 
        ' Undo the last change
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Undo()
        End If
 
    End Sub
 
    ' For Cut menu clicked
    Private Sub CutToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CutToolStripMenuItem.Click
 
        ' Cut selected text and save to the clipboard
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Cut()
        End If
 
    End Sub
 
    ' For Cut Toolbar click
    Private Sub CutToolStripButton_Click(sender As Object, e As EventArgs) Handles CutToolStripButton.Click
 
        ' Have the other Cut subroutine handle
        CutToolStripMenuItem_Click(sender, e)
 
    End Sub
 
    ' For Copy menu click
    Private Sub CopyToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyToolStripMenuItem.Click
 
        ' Copy selected text and save to the clipboard
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Copy()
        End If
 
    End Sub
 
    ' For Copy Toolbar click
    Private Sub CopyToolStripButton_Click(sender As Object, e As EventArgs) Handles CopyToolStripButton.Click
 
        ' Let other Copy sub handle
        CopyToolStripMenuItem_Click(sender, e)
 
    End Sub
 
    ' For Paste menu click
    Private Sub PasteToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles PasteToolStripMenuItem.Click
 
        ' Paste text from the clipboard
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).Paste()
        End If
 
    End Sub
 
    ' For Paste Toolbar click
    Private Sub PasteToolStripButton_Click(sender As Object, e As EventArgs) Handles PasteToolStripButton.Click
 
        PasteToolStripMenuItem_Click(sender, e)
 
    End Sub
 
    ' For Select All menu click
    Private Sub SelectAllToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SelectAllToolStripMenuItem.Click
 
        ' Select all text in the TextBox
        If TypeOf Me.ActiveControl Is TextBox Then
            CType(Me.ActiveControl, TextBox).SelectAll()
        End If
 
    End Sub
End Class